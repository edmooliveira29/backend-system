name: api-backend
on:
  push:
    branches: [ main ]

jobs:
  # run-lint:
  #     runs-on: ubuntu-latest
  #     steps:
  #       - name: Setup Backend
  #         uses: actions/checkout@v4
  #       - name: Run lint
  #         run: |
  #           npm install --legacy-peer-deps
  #           npm run lint
  # run-tests:
  #   runs-on: ubuntu-latest
  #   needs: run-lint
  #   steps:
  #     - name: Setup backend
  #       uses: actions/checkout@v4
  #     - name: Install packages in backend
  #       run: |
  #         npm install --legacy-peer-deps

  #     - name: Setup mongo to backend
  #       uses: DigiPie/mongo-action@v2.0.1
  #       with:
  #         image_version: latest
  #         port: 27017
  #     - name: Install dependencies in backend
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y wget gnupg
  #         wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
  #         echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
  #         sudo apt-get update
  #         sudo apt-get install -y mongodb-mongosh
  #         echo "${{ secrets.ENV_BACKEND }}" > ./.env
  #         npm install --legacy-peer-deps

  #     - name: Running tests
  #       run: |
  #         npm run test:unit
      
  deploy:
    runs-on: ubuntu-latest      
    # needs: run-tests
    steps:
    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
        service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

    - id: 'compute-ssh'
      uses: 'google-github-actions/ssh-compute@v1'
      with:
        instance_name: '${{ secrets.NAME_INSTANCE_GOOGLE }}'
        zone: '${{ secrets.ZONE_INSTANCE_GOOGLE }}'
        ssh_private_key: '${{ secrets.ACCOUNT_KEY_JSON_GOOGLE }}'
        command: 'echo Hello world'

    # Example of using the output
    - id: 'test'
      run: |-
        echo '${{ steps.compute-ssh.outputs.stdout }}'
        echo '${{ steps.compute-ssh.outputs.stderr }}'

      # - name: Checkout Repository
      #   uses: actions/checkout@v4
  
      # - name: Authenticate with Google Cloud
      #   uses: google-github-actions/auth@v2
      #   with:
      #     credentials_json: '${{ secrets.ACCOUNT_KEY_JSON_GOOGLE }}'
      #     export_default_credentials: true
  
      # - name: SSH into Compute Engine
      #   run: |
      #     ssh-keygen -t rsa -f ~/.ssh/google_compute_engine
      #     chmod 600 ~/.ssh/google_compute_engine
      #     gcloud compute ssh system@system --project=api-8702109450667741338-992005 --zone=us-east1-d --ssh-key-file=~/.ssh/id_rsa --quiet --tunnel-through-iap --command "echo Hello world"
